
// 常用 mixin Snippets

@mixin css3($property, $value) {
	@each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
		#{$prefix}#{$property}: $value;
	}
}

.border-transition {
	@include css3(transition, .5s)
}

.box-shadow {
	@include css3(box-shadow, 2px 2px 2px 2px #ddd)
}



// 响应式断点 Handy Sass Mixins

@mixin breakpoint($point) {
	@if $point == large {
		@media (min-width: 64.375em) { @content; }
	}
	@else if $point == mediun {
		@media (min-width: 50em) { @content; }
	}
	@else if $point == small {
		@media (min-width: 37.5em) { @content; }
	}
}

.page-wrap {
	width: 75%;
	@include breakpoint(large) {
		width: 60%;
	}
	@include breakpoint(medium) {
		width: 80%;
	}
	@include breakpoint(small) {
		width: 95%;
	}
}


// Retina 图片，这个用处不明诶



// 清除浮动

@mixin clearfix() {
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

.article {
	@include clearfix()
}



// black 和 white, 属于SASS的自定义函数咯

@function black($opacity) {
	@return rgba(0, 0, 0, $opacity)
}
@function white($opacity) {
	@return rgba(255, 255, 255, $opacity)
}

.my-class {
	background: black(0.15);
	color: white(.1)
}



// 内阴影和外阴影

@mixin box-emboss($opacity, $opacity2) {
	box-shadow: white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}

.box {
	@include box-emboss(.8, .05)
}



// 透明度

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); // IE8
}

.article-heading {
	@include opacity(.6)
}



// 绝对定位, 这个好像不错

@mixin abs-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	position: absolute;
}

.abs, .absolute {
	@include abs-pos(10px, 10px, 20px, 20px)
}



// 行高

@mixin line-height($heightValue: 12) {
	line-height: $heightValue + px; // fallback for old browsers
	line-height: (.125 * $heightValue) + rem;
}

body {
	@include line-height (16)
}